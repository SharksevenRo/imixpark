<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="cn.ebatech.imixpark"/>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="cn.ebatech.imixpark.demo.model"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/META-INF/mybatis/*Mapper.xml"/>
    </bean>
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ebatech.imixpark.demo.dao"/>
        <property name="annotationClass" value="cn.ebatech.imixpark.common.dao.MyBatisRepository"/>
    </bean>

    <!-- 事务管理器配置, Jdbc单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 定义aspectj -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- hibernate validator -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- production环境 -->
    <context:property-placeholder ignore-resource-not-found="true"
                                  location="classpath*:/META-INF/spring/application.properties"/>

    <!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <property name="initialSize" value="1" />
        <property name="minIdle" value="2"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <property name="defaultAutoCommit" value="false"/>
        <!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="600000"/>
        <property name="validationQuery" value="SELECT 1"/>
    </bean>

    <!-- Jedis配置 -->
    <bean id="jedisTemplate" class="org.springside.modules.nosql.redis.JedisTemplate">
        <constructor-arg name="jedisPool" ref="jedisPool"/>
    </bean>

    <bean id="jedisPool" class="org.springside.modules.nosql.redis.pool.JedisDirectPool">
        <constructor-arg name="config" ref="redisPoolConfig" />
        <constructor-arg name="address" ref="hostAndPort" />
    </bean>

    <bean id="hostAndPort" class="redis.clients.jedis.HostAndPort">
        <constructor-arg name="host" value="${redis.host}" />
        <constructor-arg name="port" value="${redis.port}" />
    </bean>

    <bean id="redisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" />

    <!-- 暴露服务 -->
    <bean id="userService" class="cn.ebatech.imixpark.demo.service.UserServiceImpl" />
    <bean id="userRestService" class="cn.ebatech.imixpark.demo.rest.UserRestServiceImpl" />
    <bean id="userRestService2" class="cn.ebatech.imixpark.demo.rest.UserRestService2Impl" />
</beans>