<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>


    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="cn.ebatech.imixpark"/>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" name="mysqlSessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="cn.ebatech.imixpark.common.model.user"/>
        <property name="mapperLocations" value="classpath:/META-INF/mybatis/*Mapper.xml"/>
    </bean>
    
    <bean id="fjsqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" name="fjsqlSessionFactory">
        <property name="dataSource" ref="dataSource1"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="cn.ebatech.imixpark.common.model.user"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/META-INF/mybatis/*Mapper_fj.xml"/>
    </bean>    

	<bean id="quartzsqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" name="quartzsqlSessionFactory">
        <property name="dataSource" ref="quartzSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="cn.ebatech.imixpark.common.model.user"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/META-INF/mybatis/*Mapper_quartz.xml"/>
        <property name="configLocation" value="classpath:/META-INF/mybatis/sqlmapConfig.xml"></property>
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ebatech.imixpark.user.dao"/>
        <property name="annotationClass" value="cn.ebatech.imixpark.common.dao.MyBatisRepository"/>
    	<property name="sqlSessionFactoryBeanName" value="mysqlSessionFactory" />
    </bean>
    
    
         <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ebatech.imixpark.user.fj_dao"/>
        <property name="annotationClass" value="cn.ebatech.imixpark.common.dao.MyBatisRepository"/>
    	<property name="sqlSessionFactoryBeanName" value="fjsqlSessionFactory" />
    </bean>
        <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ebatech.imixpark.user.quartz_dao"/>
        <property name="annotationClass" value="cn.ebatech.imixpark.common.dao.MyBatisRepository"/>
    	<property name="sqlSessionFactoryBeanName" value="quartzsqlSessionFactory" />
    </bean>


	<!-- 定时任务  begin-->
	
	<bean id="quartzJob" class="cn.ebatech.imixpark.user.rest.UserRestServiceImpl"></bean>
        <!-- 定义调用对象和调用对象的方法 -->
        <bean id="jobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
            <!-- 调用的类 -->
            <property name="targetObject">
                <ref bean="quartzJob"/>
            </property>
            <!-- 调用类中的方法 -->
            <property name="targetMethod">
                <value>bs2localDB</value>
            </property>
        </bean>
        <!-- 定义触发时间 -->
        <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
            <property name="jobDetail">
                <ref bean="jobtask"/>
            </property>
            <property name="cronExpression">
                <value>0 15 13 * * ? *</value>
            </property>
        </bean>
        <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
        <bean id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
            <property name="triggers">
                <list>
                    <ref bean="doTime"/>
                </list>
            </property>
        </bean>
	<!-- 定时任务  end-->

    <!-- 事务管理器配置, Jdbc单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- production环境 -->
    <context:property-placeholder ignore-resource-not-found="true" order="1"
                                  location="classpath*:/META-INF/spring/application.properties"/>

    <!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
      <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    
    <!-- 富基 接口 数据源配置,使用应用内的Tomcat JDBC连接池 -->
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@222.178.70.44:1521:CRMLS"/>
        <property name="username" value="dbusrdif"/>
        <property name="password" value="futuredif"/>
        <property name="initialSize" value="1" />
        <property name="minIdle" value="2"/>
        <property name="maxActive" value="50"/>
    </bean>
    
    <!--定时任务 数据源配置,使用应用内的Tomcat JDBC连接池 -->
    <bean id="quartzSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@222.178.70.44:1521:hdqtls"/>
        <property name="username" value="dbusrdif"/>
        <property name="password" value="futuredif"/>

        <property name="initialSize" value="1" />
        <property name="minIdle" value="2"/>
        <property name="maxActive" value="50"/>
    </bean>
    
    <bean id="userService" class="cn.ebatech.imixpark.user.service.UserServiceImpl" />
    <bean id="userRestService" class="cn.ebatech.imixpark.user.rest.UserRestServiceImpl" />
    <bean id="userRestService2" class="cn.ebatech.imixpark.user.rest.UserRestService2Impl" />
	  <bean id="suggestionService" class="cn.ebatech.imixpark.user.service.SuggestionServiceImpl" />
    <bean id="suggestionRestService" class="cn.ebatech.imixpark.user.rest.SuggestionRestServiceImpl" />
</beans>